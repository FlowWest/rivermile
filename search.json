[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maddee Wiggins. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wiggins M (2025). rivermile: Assign River Miles Monitoring Locations. R package version 0.1.0, https://flowwest.github.io/rivermile/.","code":"@Manual{,   title = {rivermile: Assign River Miles to Monitoring Locations},   author = {Maddee Wiggins},   year = {2025},   note = {R package version 0.1.0},   url = {https://flowwest.github.io/rivermile/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"rivermile","text":"package provides tools calculating river miles monitoring locations along rivers streams.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"rivermile","text":"can install rivermile package GitHub using:","code":"devtools::install_github(\"flowwest/rivermile\")"},{"path":"/index.html","id":"example-usage","dir":"","previous_headings":"Installation","what":"Example Usage","title":"rivermile","text":"function takes sf object containing point locations (e.g., sampling points) finds nearest river mile point. location outside bounds processed data, NA returned.","code":"?rivermile::find_nearest_river_miles() river_miles <- rivermile::find_nearest_river_miles(points_sp_df)"},{"path":"/index.html","id":"limitations","dir":"","previous_headings":"Installation","what":"Limitations","title":"rivermile","text":"package currently set process rivers interest Klamath River watershed HUC6 180102, includes: Blue Creek, Bogus Creek, Clear Creek, Indian Creek, Jenny Creek, Klamath River, Link River, Lost River, Salmon River, Scott River, Shasta River, Sprague River, Trinity River, Williamson River, Wood River. point outside range, NA returned.","code":""},{"path":"/reference/assign_sub_basin.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign Sub Basin — assign_sub_basin","title":"Assign Sub Basin — assign_sub_basin","text":"function takes `sf` object containing sub basin location Klamath Basin (e.g., trinity, upper klamath, etc) assigns sub-basin data point.","code":""},{"path":"/reference/assign_sub_basin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign Sub Basin — assign_sub_basin","text":"","code":"assign_sub_basin(   data,   sub_basin,   is_point = TRUE,   lon_col = \"longitude\",   lat_col = \"latitude\",   sub_basin_col = \"NAME\" )"},{"path":"/reference/assign_sub_basin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign Sub Basin — assign_sub_basin","text":"data data frame `sf` object location data. sub_basin `sf` polygon object containing sub-basin geometries names.","code":""},{"path":"/reference/assign_sub_basin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign Sub Basin — assign_sub_basin","text":"data frame (sf object) new `sub_basin` column lowercase.","code":""},{"path":"/reference/extract_waterbody.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and Clean Waterbody Names from Text Strings — extract_waterbody","title":"Extract and Clean Waterbody Names from Text Strings — extract_waterbody","text":"Parses standardizes waterbody names character vector using pattern matching cleanup rules.","code":""},{"path":"/reference/extract_waterbody.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract and Clean Waterbody Names from Text Strings — extract_waterbody","text":"","code":"extract_waterbody(names)"},{"path":"/reference/extract_waterbody.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract and Clean Waterbody Names from Text Strings — extract_waterbody","text":"names character vector site names location descriptions containing waterbody names.","code":""},{"path":"/reference/extract_waterbody.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract and Clean Waterbody Names from Text Strings — extract_waterbody","text":"character vector cleaned waterbody names (e.g., \"North Fork River\", \"Adobe Creek\").","code":""},{"path":"/reference/extract_waterbody.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract and Clean Waterbody Names from Text Strings — extract_waterbody","text":"function: Replaces common abbreviations `\"Rvr\"` `\"r\"` `\"River\"` Extracts phrases matching pattern includes optional directional descriptor prefixes (e.g., \"Upper\", \"Fork\") followed one three words ending `\"Creek\"` `\"River\"` Removes common suffix terms like `\"\"` `\"HOBO\"` may appear logger names Trims leading trailing whitespace","code":""},{"path":"/reference/extract_waterbody.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract and Clean Waterbody Names from Text Strings — extract_waterbody","text":"","code":"extract_waterbody(c(\"Upper Adobe Creek at HOBO\", \"South Fork Rvr\", \"Bell Cr\", \"Argonaut r\")) #> [1] \"Upper Adobe Creek\" \"South Fork River\"  NA                  #> [4] \"Argonaut River\"    # Returns: \"Upper Adobe Creek\", \"South Fork River\", NA, \"Argonaut River\""},{"path":"/reference/extract_waterbody_short.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Simplified Waterbody Names — extract_waterbody_short","title":"Extract Simplified Waterbody Names — extract_waterbody_short","text":"Parses simplifies waterbody names character vector removing directional structural descriptors retain core `\"River\"` `\"Creek\"` name.","code":""},{"path":"/reference/extract_waterbody_short.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Simplified Waterbody Names — extract_waterbody_short","text":"","code":"extract_waterbody_short(names)"},{"path":"/reference/extract_waterbody_short.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Simplified Waterbody Names — extract_waterbody_short","text":"names character vector containing descriptive waterbody names, typically site logger metadata.","code":""},{"path":"/reference/extract_waterbody_short.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Simplified Waterbody Names — extract_waterbody_short","text":"character vector simplified waterbody names (e.g., `\"Adobe Creek\"`, `\"Klamath River\"`), optional descriptors noise removed.","code":""},{"path":"/reference/extract_waterbody_short.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Simplified Waterbody Names — extract_waterbody_short","text":"function designed reduce waterbody names consistent minimal form : Standardizing `\"Rvr\"` `\"r\"` `\"River\"` Removing prefixes `\"Fork\"`, `\"Slough\"`, `\"Branch\"`, `\"Tributary\"`, `\"Side Channel\"`, etc. Removing directional descriptors like `\"Upper\"`, `\"Lower\"`, `\"North\"`, `\"East\"`, etc. Extracting names ending `\"Creek\"` `\"River\"` Stripping common suffix noise like `\"\"` `\"HOBO\"` Trimming whitespace final result useful comparing filtering standardized stream names across datasets.","code":""},{"path":"/reference/extract_waterbody_short.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Simplified Waterbody Names — extract_waterbody_short","text":"","code":"extract_waterbody_short(c(   \"Upper Adobe Creek at HOBO\",   \"South Fork Rvr\",   \"Side Channel Klamath River\",   \"West Branch Willow Creek\" )) #> [1] \"Adobe Creek\"   \"River\"         \"Klamath River\" \"Willow Creek\"  # Returns: \"Adobe Creek\", \"South River\", \"Klamath River\", \"Willow Creek\""},{"path":"/reference/find_nearest_river_miles.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Nearest River Miles — find_nearest_river_miles","title":"Find Nearest River Miles — find_nearest_river_miles","text":"function takes `sf` object containing point locations (e.g., sampling points) finds nearest river mile point.","code":""},{"path":"/reference/find_nearest_river_miles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Nearest River Miles — find_nearest_river_miles","text":"","code":"find_nearest_river_miles(points_sf)"},{"path":"/reference/find_nearest_river_miles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Nearest River Miles — find_nearest_river_miles","text":"points_sf `sf` object containing points `stream_short` column.","code":""},{"path":"/reference/find_nearest_river_miles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Nearest River Miles — find_nearest_river_miles","text":"`sf` object added `nearest_river_mile` column. river mile data exists, value `NA`.","code":""},{"path":"/reference/gage_data_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Format and Filter Gage Data for Spatial Analysis — gage_data_format","title":"Format and Filter Gage Data for Spatial Analysis — gage_data_format","text":"Converts gage dataset latitude longitude columns `sf` spatial object, option filter streams included `rivermile::all_klamath_rivers_line` reference dataset.","code":""},{"path":"/reference/gage_data_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format and Filter Gage Data for Spatial Analysis — gage_data_format","text":"","code":"gage_data_format(data, filter_streams = TRUE)"},{"path":"/reference/gage_data_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format and Filter Gage Data for Spatial Analysis — gage_data_format","text":"data data frame containing least columns `longitude`, `latitude`, `stream`. filter_streams Logical; `TRUE`, output include gages whose `stream_short` names match `rivermile::all_klamath_rivers_line$river`. Defaults `TRUE`.","code":""},{"path":"/reference/gage_data_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format and Filter Gage Data for Spatial Analysis — gage_data_format","text":"`sf` object point geometries WGS84 (EPSG:4326), optionally filtered stream.","code":""},{"path":"/reference/gage_data_format.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format and Filter Gage Data for Spatial Analysis — gage_data_format","text":"function: Extracts short stream name `stream` column using `extract_waterbody_short()` Removes `river_mile` column present Filters rows missing longitude Converts `sf` object using `longitude` `latitude` coordinates Optionally filters include streams listed `rivermile` package’s `all_klamath_rivers_line$river`","code":""},{"path":"/reference/gage_data_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format and Filter Gage Data for Spatial Analysis — gage_data_format","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage formatted_gages <- gage_data_format(my_gage_data) } # }"},{"path":"/reference/get_nearest_river_mile_pt.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Nearest River Mile Point — get_nearest_river_mile_pt","title":"Get Nearest River Mile Point — get_nearest_river_mile_pt","text":"Finds nearest river mile given spatial point computing shortest geodesic distance point set river mile locations.","code":""},{"path":"/reference/get_nearest_river_mile_pt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Nearest River Mile Point — get_nearest_river_mile_pt","text":"","code":"get_nearest_river_mile_pt(river_mile_points, spatial_pt)"},{"path":"/reference/get_nearest_river_mile_pt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Nearest River Mile Point — get_nearest_river_mile_pt","text":"river_mile_points `sf` object containing river mile locations, `geometry` column representing point geometries `river_mile` column. spatial_pt `sf` object representing single point location (e.g., sampling point).","code":""},{"path":"/reference/get_nearest_river_mile_pt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Nearest River Mile Point — get_nearest_river_mile_pt","text":"river mile value `river_mile_points` closest `spatial_pt`. match found, returns `NA`.","code":""},{"path":"/reference/get_nearest_river_mile_pt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Nearest River Mile Point — get_nearest_river_mile_pt","text":"- Ensures `spatial_pt` `river_mile_points` defined CRS (`EPSG:4326`). - Transforms `spatial_pt` match CRS `river_mile_points` necessary. - Computes distances using `st_distance()` returns nearest river mile.","code":""},{"path":"/reference/load_river_mile_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load River Mile Data from the `rivermile` Package — load_river_mile_data","title":"Load River Mile Data from the `rivermile` Package — load_river_mile_data","text":"Dynamically loads river mile dataset `rivermile` package name. specified object found error occurs, function returns `NULL` prints informative message.","code":""},{"path":"/reference/load_river_mile_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load River Mile Data from the `rivermile` Package — load_river_mile_data","text":"","code":"load_river_mile_data(river_name)"},{"path":"/reference/load_river_mile_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load River Mile Data from the `rivermile` Package — load_river_mile_data","text":"river_name character string specifying name dataset, assumed exist within `rivermile` package.","code":""},{"path":"/reference/load_river_mile_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load River Mile Data from the `rivermile` Package — load_river_mile_data","text":"data frame containing river mile data object found; otherwise, `NULL`.","code":""},{"path":"/reference/load_river_mile_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load River Mile Data from the `rivermile` Package — load_river_mile_data","text":"","code":"if (FALSE) { # \\dontrun{ # Load a specific river mile dataset from the rivermile package rm_data <- load_river_mile_data(\"wood_river\")  # If the dataset doesn't exist, a message will be printed and NULL returned rm_data <- load_river_mile_data(\"nonexistent_river\") } # }"}]
